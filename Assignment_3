Q-1 Question 1
Given an integer array nums of length n and an integer target, find three integers
in nums such that the sum is closest to the target.
Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2

Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
A-1
 public int threeSumClosest(int[] nums, int target) {
        
        Arrays.sort(nums);
        int closestSum= Integer.MAX_VALUE;
        for(int i=0;i<nums.length-2;i++)
        {
            int left=i+1;
            int right=nums.length-1;
          while(left<right)
          {
           int currSum= nums[i]+nums[left]+nums[right];
           if(currSum==target)
           {
                return currSum;
           }
           else if(Math.abs(target - currSum) < Math.abs(target - closestSum))    {
                    closestSum=currSum;
           }

             if(currSum<=target)
             {
                 left+=1;
                 while(nums[left]==nums[left-1]&&left<right)
                 {
                     left+=1;
                 }
             }
             else
             {
                 right-=1;
             }
          


         }
        }
           return closestSum;
    }
Q-2 Question 2
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
           ● 0 <= a, b, c, d < n
           ● a, b, c, and d are distinct.
           ● nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

A-2
