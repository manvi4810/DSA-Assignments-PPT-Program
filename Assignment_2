Q-1
public int arrayPairSum(int[] nums) {
        
    Arrays.sort(nums);
    int res=0;
    for(int i=0;i<nums.length;i+=2)
    {
        res+=nums[i];
    }
    return res;
}
Q-2
public int distributeCandies(int[] candyType) {
        
        HashSet<Integer> h= new HashSet<>();
        int n=candyType.length/2;
        for(int e: candyType)
        {
             h.add(e);
            if(h.size()>=n)
            {
               return n; 
            }
           
        }
       
            return h.size();
        
    }
Q-3
  public int findLHS(int[] nums) {
        
        int result=0;
        HashMap<Integer, Integer> map= new HashMap<>();
        for(int num:nums)
        {
                 map.put(num,map.getOrDefault(num,0)+1);
        }
        for(int i=0;i<nums.length;i++)
        {
            if(map.containsKey(nums[i]+1))
            {
                int length=map.get(nums[i])+map.get(nums[i]+1);
                result= Math.max(result, length);

            }
           
        }
        return result;
Q-4
   
public boolean canPlaceFlowers(int[] flowerbed, int n) {
    int count = 0;
    int i = 0;
    while (i < flowerbed.length) {
        if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
            flowerbed[i] = 1;
            count++;
        }
        i++;
    }
    return count >= n;
}
Q-5

public class Question5 {
    
    int min1, min2, max1, max2, max3;
    min1 = min2 = Integer.MAX_VALUE;
    max1 = max2 = max3 = Integer.MIN_VALUE;
    for(int i = 0; i < nums.length; i++){
        if(max1 < nums[i]){
            max3 = max2;
            max2 = max1;
            max1 = nums[i];
        }else if(max2 < nums[i]){
            max3 = max2;
            max2 = nums[i];
        }else if(max3 < nums[i]){
            max3 = nums[i];
        }
        

        if(min1 > nums[i]){
            min2 = min1;
            min1 = nums[i];
        }else if(min2 > nums[i]){
            min2 = nums[i];
        }
        
    }
    
    return Math.max(max1 * max2 * max3 , min1 * min2 * max1);
}
Q-6

public int search(int[] nums, int target) {
        
        int l=0,h=nums.length-1;
        int m;
        while(l<=h)
        {
             m=l+(h-l)/2;
            if(nums[m]==target)
             return m;
            else if(nums[m]<target)
              {
                  l=m+1;
              }
              else if(nums[m]>target)
              {
                  h=m-1;
              }
              

        }
        return -1;
    }
Q-7

 public boolean isMonotonic(int[] nums) {
        
        int b=0, c=0;
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]>nums[i-1])
            {
                b++;
            }
            else if(nums[i]<nums[i-1])
            {
                c++;
            }

        }
        if(b>=1&&c>=1)
        {
           return false;
        }
        else{
            return true;
        }
        
    }
}
Q-8

public int Question8(int[] nums, int k) {
      
    int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
    for (int n : nums) {
        if (min > n) {
            min = n;
        }
        if (max < n) {
            max = n;
        }
    }
    int diff = max - min;
    if (diff <= k + k) {
        return 0;
    } else {
        return diff - (k + k);
    }
    
}
