//PPT PROGRAM Assignment-1 

**Q1.** Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

**Example:**
Input: nums = [2,7,11,15], target = 9
Output0 [0,1]

**Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1][


class Question_1 {
    public static void main(String[] args) {
        
        Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int t= sc.nextInt();
        int[] a= new int[n];
        int[] b= new int[2];
        for(int i=0;i<n;i++)
        {
           a[i]=sc.nextInt();
        }
        HashMap<Integer, Integer> map= new HashMap<>();
        for(int i=0;i<n;i++)
        {
            if(map.containsKey(t-a[i]))
            {
                b[0]= map.get(t-a[i]);
                b[1]=i;
                break;
            }
            map.put(a[i],i);
        }
        for(int i=0;i<2;i++)
        {
            System.out.println(b[i]);
        }
       
    }

Q-2 Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
- Return k.


Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_*,_*]

**Explanation:** Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)[


*/
public class Question_2 {
    public static void main(String[] args)
    {
    Scanner sc= new Scanner(System.in);
    int n=sc.nextInt();
    int val=sc.nextInt();
    int k=0;
    int[] a= new int[n];

        for(int i=0;i<n;i++)
        {
           a[i]=sc.nextInt();
        }
    
        for(int j=0;j<n;j++)
        {
            if(a[j]!=val)
            {
              int t= a[j];
              a[j]=a[k];
              a[k++]=t;
            }

        }
        System.out.println(k);
}
}
Q-3 Q3.** Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], target = 5

Output: 2

 */
public class Question_3 {
    
    

        public static int searchInsert(int[] nums, int target) {
            int left = 0;
            int right = nums.length - 1;
            
            while (left <= right) {
                int mid = left + (right - left) / 2;
                
                if (nums[mid] == target) {
                    return mid;
                } else if (nums[mid] < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
            
            return left;
        }
        
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            int t = sc.nextInt();
            int[] nums = new int[n];
            
            for (int i = 0; i < n; i++) {
                nums[i] = sc.nextInt();
            }
            
            int result = searchInsert(nums, t);
            System.out.println(result);
        }
    
    }
Q-4 Q4.** You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.

Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

   public class Question_4 {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            int s= 0;
            int[] digits = new int[n];
            
            public int[] plusOne(int[] digits) {
                int n = digits.length;
                
                for (int i = n - 1; i >= 0; i--) {
                    if (digits[i] < 9) {
                        digits[i]++;
                        return digits;
                    }
                    
                    digits[i] = 0;
                }
                
                int[] newDigits = new int[n + 1];
                newDigits[0] = 1;
                
                return newDigits;
            }
}
Q-5 You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

**Example 1:**
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

**Explanation:** The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


 */
public class Question_5 {
    
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        int i=m-1;
        int j=n-1;
        int k=nums1.length-1;

        while(j>=0)
        {
            if(i>=0&&nums1[i]>nums2[j])
            {
                nums1[k]=nums1[i];
                k--;
                i--;
            }
            else
            {
                nums1[k]=nums2[j];
                k--; 
                j--;
            }

        }
    }
   
}
Q-6: Q6.** Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true
 */
public class Question_6 {

    public boolean containsDuplicate(int[] nums) {
        if(nums==null||nums.length==0)
        {
            return false;
        }
        HashSet<Integer> set= new HashSet<Integer>();
        for(int i:nums)
        {
            if(!set.add(i))
            {
                return true;
            }
        }
        return false;
    }
    //2nd
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> seen = new HashMap<>();
        for (int num : nums) {
            if (seen.containsKey(num) && seen.get(num) >= 1)
                return true;
            seen.put(num, seen.getOrDefault(num, 0) + 1);
        }
        return false;
    }
    

}
Q-7Q7.** Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

</aside>
 */
public class Question_7 {
    
    public void moveZeroes(int[] nums) {
        
        int j=0,i=0;
        while(i<nums.length)
        {
            if(nums[i]!=0)
            {
            int t=nums[i];
            nums[i]=nums[j];
            nums[j]=t;
            j++;
            }
            i++;
        }

    }
}

Q-8      
   public int[] findErrorNums(int[] nums) {
        
        
        int[] r= new int[2];
        int[] f= new int[nums.length+1];
        for(int i=0;i<nums.length;i++)
        {
           f[nums[i]]++;
        }
        for(int i=1;i<f.length;i++)
        {
            if(f[i]>1)
            {
                r[0]=i;
            }
           if(f[i]==0)
           {
               r[1]=i;
           }
        }

        return r;
    }


